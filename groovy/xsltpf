#!/usr/bin/env groovy
// -*- coding: utf-8-unix -*-
// vim:fileencoding=utf-8:ff=unix

import groovy.transform.CompileStatic
import javax.xml.transform.TransformerFactory
import javax.xml.transform.stream.*

@CompileStatic
def static main(String[] args) {
  def progName = new File(this.class.protectionDomain.codeSource.location.file).name

  def cli = new CliBuilder(usage: progName + ' [-hv] [-o output-file] <-e string-xsl|-t input-xsl> [input-xml]')
  cli.with {
    writer = new java.io.PrintWriter(System.err)
    e argName: 'string-xsl',  args: 1, 'xsl string'
    h 'show this help message and exit'
    o argName: 'output-file', args: 1, 'output file name (or stdout)'
    t argName: 'input-xsl',   args: 1, 'input xsl file name'
    v "show program's version number and exit"
  }
  def opt = cli.parse args
  if (!opt) {
    System.exit 1
  }
  if (opt.h) {
    cli.usage()
    System.exit 0
  }
  if (opt.v) {
    println progName + ' 1.1.0.20190409'
    System.exit 0
  }
  if (!opt.e == !opt.t) {
    cli.usage()
    System.exit 1
  }
  def arg = opt.arguments()
  if (arg.size >= 2) {
    cli.usage()
    System.exit 1
  }

  try {
    def xml = (arg.size == 0) ? new StreamSource(System.in)
                              : new StreamSource(new File(arg[0]))
    def xsl = opt.e ? new StreamSource(new StringReader(opt.e))
                    : new StreamSource(new File(opt.t))
    def out = (!opt.o) ? new StreamResult(System.out)
                       : new StreamResult(new File(opt.o))

    def tff = TransformerFactory.newInstance()
    def tf = tff.newTransformer xsl
    tf.transform xml, out

    System.exit 0
  } catch (e) {
    System.err.println e.getLocalizedMessage()
    System.exit 1
  }
}
